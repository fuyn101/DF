% ==========================================================
%               G1 权重计算方法 - 调用示例
% ==========================================================
%
%   本脚本旨在演示如何调用 `calculateG1Weights` 函数来计算指标权重。
%   您只需要根据您的实际需求修改 "用户输入参数" 部分即可。
%
%   执行步骤:
%   1. 确保 `calculateG1Weights.m` 文件与本脚本在同一目录或MATLAB路径下。
%   2. 根据您的评价体系，设置下面的 `p_relationship` 和 `p_relative`。
%   3. 运行本脚本 (按 F5 或在命令行输入 `run_G1_example`)。
%   4. 在命令行窗口查看计算得到的权重结果。
%
% ==========================================================

% 清理工作区和命令行
clear all;
clc;
close all;

% =================== 用户输入参数 ===================
% 1. 定义指标的重要性排序
%    例如: [1, 2, 4, 5, 3, 6] 表示共有6个指标，
%    其重要性从高到低依次为：指标1 > 指标2 > 指标4 > 指标5 > 指标3 > 指标6
p_relationship = [1, 2, 4, 5, 3, 6];

% 2. 定义排序后，相邻指标的重要性比值
%    p_relative(k) = (第k重要指标的权重) / (第k+1重要指标的权重)
%    例如: p_relative(1) 是 指标1/指标2 的权重比值
%    值的含义参考: 1.0=同等重要, 1.2=稍微重要, 1.4=明显重要, 1.6=非常重要, 1.8=极端重要
p_relative = [1, 1.4, 1.2, 1, 1.2];
% ==========================================================


% =================== 执行计算与显示 ===================
% 调用核心函数进行计算
try
    [p_final_weights, p_weight_sorted] = calculateG1Weights(p_relationship, p_relative);
    
    % --- 显示结果 ---
    fprintf('=================== G1权重计算结果 ===================\n');
    
    % 显示排序后的权重
    fprintf('\n按重要性排序的权重 (p_weight_sorted):\n');
    disp(p_weight_sorted);
    
    % 显示最终权重
    fprintf('映射回原始顺序的最终权重 (p_final_weights):\n');
    disp(p_final_weights);
    
    % 检查权重总和是否为1 (用于验证)
    fprintf('\n权重总和: %f\n', sum(p_final_weights));
    
    fprintf('======================================================\n');
    
catch ME
    % 捕获并显示错误信息
    fprintf('\n计算出错:\n');
    disp(ME.message);
end
% ==========================================================
