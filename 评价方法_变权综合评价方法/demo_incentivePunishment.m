%% 状态变权模型 - 演示脚本
% =========================================================================
% 作者: [Your Name/Organization]
% 日期: 2023-10-27
%
% 使用说明:
% 1. 确保 MATLAB 的 Symbolic Math Toolbox 已安装。
% 2. 将本文件与 `incentivePunishmentVariableWeight.m` 函数放在同一文件夹。
% 3. 修改下方的【用户配置区】以符合您的数据。
% 4. 点击"运行"查看结果。
% =========================================================================
clear; clc; close all;

%% ======================= 用户配置区 (USER CONFIGURATION) =======================
% --- 1. 定义常数权重 (基础权重, 和必须为1) ---
constant_weights = [0.1316, 0.1940, 0.1224, 0.0925, 0.1781, 0.1094, 0.1721];

% --- 2. 定义变权区间 (指标数 x 3 的矩阵) ---
% 每行代表一个指标
% 第1列: 惩罚区上界, 第2列: 中性区上界, 第3列: 激励区上界
d_intervals = [
    0.25, 0.5, 0.75;  % 指标1的区间
    0.277, 0.5373, 0.7906;  % 指标2的区间
    0.2126, 0.4696, 0.8149;  % 指标3的区间
    0.1753, 0.5364, 0.82; % 指标4的区间
    0.1501, 0.4330, 0.7765;
    0.2299, 0.5544, 0.7818;
    0.3097, 0.5107, 0.6963
    ];

% --- 3. 定义用于标定模型的指标索引 ---
% 告诉模型，用哪个指标的行为来求解a1, a2, a3等参数
calibration_indices.punish = 6;            % 使用第6个指标来标定"惩罚"效应
calibration_indices.neutral = 5;           % 使用第5个指标来标定"中性"效应
calibration_indices.incentive = 2;         % 使用第2个指标来标定"激励"效应
calibration_indices.strong_incentive = 1;  % 使用第1个指标来标定"强激励"效应

% --- 4. 定义标定样本 (一个有代表性的样本) ---
% 该样本的值应能触发上面定义的各种效应
calibration_sample = [0.2066, 0.2901, 0.8011, 0.8733, 0.0632, 0.4112, 0.3211]; % x

% --- 5. 定义理想权重 (当处于标定样本状态时，期望的权重) ---
% 注意：这里的权重和不要求为1
ideal_weights = [0.1192, 0.1926, 0.1372, 0.1284, 0.1512, 0.1101, 0.1613]; % w

% --- 6. 定义待评估的实际样本数据 ---
% 每一行是一个样本，所有值必须已归一化到[0, 1]
X_samples = [
    0.1199	0.1768	0.1127	0.1338	0.1485	0.1021	0.2062;  % 样本1
    0.1334	0.1967	0.1325	0.1028	0.1493	0.1109	0.1745;  % 样本2
    0.1375	0.1510	0.1346	0.0967	0.1861	0.1143	0.1798;  % 样本3
    0.1222	0.1802	0.1152	0.0859	0.2273	0.1016	0.1675;  % 样本4
    0.1174	0.1731	0.1181	0.0825	0.2579	0.0974	0.1536;  % 样本5
    0.1519	0.1650	0.1474	0.0579	0.2247	0.0519	0.2012;  % 样本6
    0.1214	0.1790	0.1155	0.0854	0.2315	0.1009	0.1662   % 样本7
    ];
%% ======================= 配置结束，下方代码请勿修改 =======================

%% 核心计算: 调用变权函数
fprintf('开始计算动态权重...\n');

% 1. 将配置参数打包成结构体
config.constant_weights = constant_weights;
config.d_intervals = d_intervals;

% 2. 将标定参数打包成结构体
calibration.ideal_weights = ideal_weights;
calibration.sample = calibration_sample;
calibration.indices = calibration_indices;

% 3. 使用新的函数签名调用
dynamic_weights = incentivePunishmentVariableWeight(X_samples, config, calibration);

%% 结果显示
if ~isempty(dynamic_weights)
    fprintf('----- 动态权重计算结果 -----\n');
    for i = 1:size(X_samples, 1)
        fprintf('样本 %d:\n', i);
        fprintf('  原始值:   %s\n', sprintf('%.4f  ', X_samples(i, :)));
        fprintf('  动态权重: %s (和=%.4f)\n\n', ...
            sprintf('%.4f  ', dynamic_weights(i, :)), sum(dynamic_weights(i, :)));
    end
else
    fprintf('动态权重计算失败，请检查函数内部的错误信息。\n');
end
