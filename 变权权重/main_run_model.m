%% 状态变权模型 - 主运行脚本
% =========================================================================
% 使用说明:
% 1. 确保 symbolic math toolbox 已安装
% 2. 将本文件与另外两个函数文件放在同一文件夹
% 3. 只需修改下方的【用户配置区】
% 4. 点击"运行"即可
% =========================================================================
clear; clc; close all;

%% ======================= 用户配置区 (USER CONFIGURATION) =======================
% --- 1. 定义常数权重 (基础权重, 和必须为1) ---
constant_weights = [0.1316, 0.1940, 0.1224, 0.0925, 0.1781, 0.1094, 0.1721];

% --- 2. 定义变权区间 (指标数 x 3 的矩阵) ---
% 每行代表一个指标
% 第1列: 惩罚区上界, 第2列: 中性区上界, 第3列: 激励区上界
d_intervals = [
    0.25, 0.5, 0.75;  % 指标1的区间
    0.277, 0.5373, 0.7906;  % 指标2的区间
    0.2126, 0.4696, 0.8149;  % 指标3的区间
    0.1753, 0.5364, 0.82; % 指标4的区间
     0.1501, 0.4330, 0.7765;  
    0.2299, 0.5544, 0.7818;  
    0.3097, 0.5107, 0.6963  
];

% --- 3. 定义用于标定模型的指标索引 (这是核心改进！) ---
% 告诉模型，用哪个指标的行为来求解a1, a2, a3等参数
calibration_indices.punish = 6;            % 使用第1个指标来标定"惩罚"效应
calibration_indices.neutral = 5;           % 使用第2个指标来标定"中性"效应
calibration_indices.incentive = 2;         % 使用第3个指标来标定"激励"效应
calibration_indices.strong_incentive = 1;  % 使用第4个指标来标定"强激励"效应

% --- 4. 定义标定样本 (一个有代表性的样本) ---
% 该样本的值应能触发上面定义的各种效应
calibration_sample = [0.2066, 0.2901, 0.8011, 0.8733, 0.0632, 0.4112, 0.3211]; % x

% --- 5. 定义理想权重 (当处于标定样本状态时，期望的权重) ---
% 注意：这里的权重和不要求为1
ideal_weights = [0.1192, 0.1926, 0.1372, 0.1284, 0.1512, 0.1101, 0.1613]; % w

% --- 6. 定义待评估的实际样本数据 ---
% 每一行是一个样本，所有值必须已归一化到[0, 1]
X_samples = [
    0.1199	0.1768	0.1127	0.1338	0.1485	0.1021	0.2062;  % 样本1
    0.1334	0.1967	0.1325	0.1028	0.1493	0.1109	0.1745;  % 样本2
    0.1375	0.1510	0.1346	0.0967	0.1861	0.1143	0.1798;  % 样本3
    0.1222	0.1802	0.1152	0.0859	0.2273	0.1016	0.1675;  % 样本4
    0.1174	0.1731	0.1181	0.0825	0.2579	0.0974	0.1536;
0.1519	0.1650	0.1474	0.0579	0.2247	0.0519	0.2012;
0.1214	0.1790	0.1155	0.0854	0.2315	0.1009	0.1662

];
%% ======================= 配置结束，下方代码请勿修改 =======================

%% 第1步: 验证输入
if abs(sum(constant_weights) - 1) > 1e-6
    warning('常数权重(constant_weights)之和不为1，可能导致结果不符合预期！');
end

%% 第2步: 计算模型参数
% 调用函数，求解 c, a1, a2, a3
model_params = calculateModelParameters(constant_weights, ideal_weights, ...
    calibration_sample, d_intervals, calibration_indices);

% 检查参数是否求解成功
if isempty(model_params)
    return; % 如果求解失败，函数内部会打印错误信息，此处直接退出
end

% 显示计算出的参数
fprintf('模型参数计算成功:\n');
fprintf('    c  = %.3f\n', model_params.c);
fprintf('    a1 = %.3f (惩罚区系数)\n', model_params.a1);
fprintf('    a2 = %.3f (激励区系数)\n', model_params.a2);
fprintf('    a3 = %.3f (强激励区系数)\n\n', model_params.a3);

%% 第3步: 计算动态权重
% 调用函数，为所有样本计算动态权重
dynamic_weights = calculateDynamicWeights(X_samples, constant_weights, ...
    d_intervals, model_params);

%% 第4步: 显示结果
fprintf('----- 动态权重计算结果 -----\n');
for i = 1:size(X_samples, 1)
    fprintf('样本 %d:\n', i);
    fprintf('  原始值:   %s\n', sprintf('%.3f  ', X_samples(i, :)));
    fprintf('  动态权重: %s (和=%.3f)\n\n', ...
        sprintf('%.3f  ', dynamic_weights(i, :)), sum(dynamic_weights(i, :)));
end
